{"ast":null,"code":"import{jwtDecode}from'jwt-decode';/** Function to check the validity of the JWT token stored in localStorage. */export const isTokenValid=()=>{const token=localStorage.getItem('token');// Retrieve the token stored in localStorage\nif(!token)return false;// Return 'false' if the token does not exist\ntry{// Decode the token to extract information\nconst decodedToken=jwtDecode(token);const currentTime=Date.now()/1000;// Get the current time in seconds\n// Check if the token has expired by comparing the expiration time with the current time\nif(decodedToken.exp<currentTime){localStorage.removeItem('token');// Remove the expired token from localStorage\nreturn false;}return true;}catch(error){console.error('Error decoding token:',error);localStorage.removeItem('token');// Remove the corrupted or invalid token from localStorage\nreturn false;}};","map":{"version":3,"names":["jwtDecode","isTokenValid","token","localStorage","getItem","decodedToken","currentTime","Date","now","exp","removeItem","error","console"],"sources":["/Users/marcelotavares/Desktop/newBooks/newBooksFrontend/review-platform-frontend/src/components/Auth.js"],"sourcesContent":["import { jwtDecode } from 'jwt-decode';\n\n/** Function to check the validity of the JWT token stored in localStorage. */\n\nexport const isTokenValid = () => {\n    const token = localStorage.getItem('token');  // Retrieve the token stored in localStorage\n    if (!token) return false;  // Return 'false' if the token does not exist\n\n    try {\n        // Decode the token to extract information\n        const decodedToken = jwtDecode(token);\n        \n        const currentTime = Date.now() / 1000;  // Get the current time in seconds\n        // Check if the token has expired by comparing the expiration time with the current time\n        if (decodedToken.exp < currentTime) {\n            localStorage.removeItem('token');  // Remove the expired token from localStorage\n            return false;\n        }\n\n        return true;\n    } catch (error) {\n        console.error('Error decoding token:', error);\n        localStorage.removeItem('token');  // Remove the corrupted or invalid token from localStorage\n        return false;\n    }\n};\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,YAAY,CAEtC,8EAEA,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAG;AAC9C,GAAI,CAACF,KAAK,CAAE,MAAO,MAAK,CAAG;AAE3B,GAAI,CACA;AACA,KAAM,CAAAG,YAAY,CAAGL,SAAS,CAACE,KAAK,CAAC,CAErC,KAAM,CAAAI,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG;AACxC;AACA,GAAIH,YAAY,CAACI,GAAG,CAAGH,WAAW,CAAE,CAChCH,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC,CAAG;AACnC,MAAO,MAAK,CAChB,CAEA,MAAO,KAAI,CACf,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7CR,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC,CAAG;AACnC,MAAO,MAAK,CAChB,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}